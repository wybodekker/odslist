#!/usr/bin/env ruby

# encoding: utf-8
# todo: make options:
# 	-r,--rows=list
#	-c,--cols=list

Version='1.06'
Myname = File.basename($0)

require 'optparse'
require 'ostruct'
begin
  # This causes a warning that can be silenced by setting the 
  # environment variable THOR_SILENCE_DEPRECATION 
  # Maybe better to re-program using the gem rods?
  ENV['THOR_SILENCE_DEPRECATION'] == '1' or
     raise 'Please set your environment variable THOR_SILENCE_DEPRECATION to 1'
  require 'ods'
rescue LoadError
  raise LoadError,<<~EOD
    \nYou probably did not install ods.rb. 
    Install with: sudo gem install -r ods
EOD
end

Help=
<<'DOC'
= odslist - List the contents of an OpenDocument Spreadsheet
= Synopsis
words [options] files	

== Options

-s,--sheets=list	List the sheets in the comma separated |list| of
			sheet names or numbers.
			By default, all sheets are listed.
			Sheets are counted from 1 up.
-n,--newline=s		Replace newlines wit |s| in multiline cells.
			Default: |\n\t|.
-m,--maxcols=n		Print |n| columns. 
			Default: strip empty cells from the end of the row.
-c,--comma		Separate fields with comma and quote fields.
-v,--verbose		Print header above each sheet.
-V,--version		Print version (1.01) and exit.
-h,--help		Print this help and exit.
   
= Description
odslist lists the contents of an OpenDocument Spreadsheet as
tab-separated, unquoted cells. With the |--verbose| option, a header
line is printed above each sheet, containing the number of the sheet
and its name.

= Author
[Wybo Dekker](wybo@dekkerdocumenten.nl)

= Copyright
Released under the [GNU General Public License](www.gnu.org/copyleft/gpl.html)
DOC

module Ods
  class Cell

    def value
      value_type = content['office:value-type']
      case value_type
        when nil, 'string', 'currency'
          text
        when 'date'
          Date.strptime(content['office:date-value'], "%Y-%m-%d")
        when 'boolean'
          content['office:boolean-value'] == 'true' ? true : false
        when 'float'
          str = content['office:value']
          if str.match(/\./)
            str.to_f
          else
            str.to_i
          end
        when 'percentage'
          content['office:value'].to_f
        else
          warn "Unknown type: #{value_type} [#{text}]"
          text
      end
    end
  end
end

def die(m)
   STDERR.puts "#{Myname}: #{m}"
   exit 1
end

def help
  system("echo \"#{Help}\" | less -P#{Myname}-#{Version.tr('.','·')}")
end

# Option defaults
$o = OpenStruct.new(
  :newline => "\n\t",
:separator => "\t",
 :surround => '',
  :verbose => false,
 :mysheets => [],
  :maxcols => 0,
)

OptionParser.new(
  banner = <<~EOD,
	#{Myname} - List contents of OpenDocument spreadsheet\n
	Usage: #{Myname} [options] file\n
	Options:
	EOD
   width = 18,
  indent = ''
) do |opts|
 
   opts.on('-s','--sheets=list',String,
	'List the sheets in the comma separated |list|.',
	'By default, all sheets are listed',
        'The list may contain sheet numbers (counting from 1 up)',
        'or sheet names'
   ) do |v|
      $o.mysheets = v.split(',')
   end

   opts.on('-n','--newline=s',String,
	'replace newlines wit |s| in multiline cells',
	'Default: \n\t'
   ) do |v|
      $o.newline = v
   end

   opts.on('-m','--maxcols=n',Integer,
          'Print |n| columns.',
          'Default: strip empty cells from the end of the row.'
   ) do |v|
      $o.maxcols = v.to_i
   end

   opts.on('-v','--verbose',
	'print header above each sheet'
   ) do
      $o.verbose = true
   end

   opts.on('-c','--comma',
	'set field separator to comma and doublequote fields'
   ) do
	$o.separator = '","'
        $o.surround = '"'
   end

   opts.on('-V','--version',
	'print version and exit'
   ) do
      puts Version
      exit
   end

   opts.on('-h',
	'print this help and exit'
   ) do
      puts opts.to_s.sub(/^ *-I\n/,'')
      exit
   end

   opts.on('-H','--help',
	'show full documentation (use less!) and exit'
   ) do
      help
      exit
   end

   opts.on('-I') do
      system("instscript #{Myname}")
      exit 0
   end

   opts.parse!
end

file = ARGV[0] or die "I need an .ods file"
file =~ /\.ods$/ or die "My input file needs a .ods extension"

i=$VERBOSE
$VERBOSE=nil # warning from nokogiri old version 
allsheets = Ods::File.new(file).sheets
$VERBOSE=i

ns = allsheets.size
if $o.mysheets.empty?
   $o.mysheets = (0...ns).to_a
else
   $o.mysheets.map! do |i|
      if i =~ /^\d+$/
         i = i.to_i
         if i.between?(1,ns)
            i-=1
         else
            die "List contains a value (#{i}) outside the range of available sheets (1-#{ns})"
         end
      else
         rep = nil
         (0...ns).each do |j|
            if allsheets[j].name == i
               rep = j
               break
            end
         end
         die "no sheet named «#{i}» was found" unless rep
         rep
      end
   end
end

$o.mysheets.each do |i|
   s = allsheets[i]
   puts "==== Sheet #{i+1}: #{s.name} ====" if $o.verbose
   s.rows.each do |r|
      c = r.cols # size is equal to size of largest row (nmax) in the sheet
      if $o.maxcols == 0
         while c.size > 0  && c[-1].text.empty?
            c.pop
         end
      else
         # remove excess cols; there may be less than maxcols cols now!
         c = c[0...$o.maxcols]
      end
      c = c.map { |k| k.content.children.map { |l| l.text }.join($o.newline)}
      c.push('') while c.size < $o.maxcols 
      puts $o.surround+c.join($o.separator)+$o.surround
   end
end
